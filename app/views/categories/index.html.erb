
<style>
.fridge-drop-container{
	width: 100%;
	height: 100%;
}
#drop-target-one {
	width: 500px;
	height: 500px;
}
.is_anagram {
  background: green;
}
.not_anagram {
  background: red;
}
.no_entry{
	background: white;
}
  
</style>


	<div class="container">

		<div id="dd-elements" class="clearfix">
			<ul id="drag-elements">



	<% @categories.each do |c| %> 

	<% @category = c %>

<li draggable="true"><%= link_to c.name, new_category_item_path(c), modal: true, dataToggle:"modal", dataTarget:".bs-example-modal-lg" %></li>
	



	 <% end %>

	<div id="result"></div>
	<div id="drop-target-one" >
		<div class="fridge-drop-container"><%= image_tag "https://s3.amazonaws.com/uploads.hipchat.com/39979/962337/lQTLYzlNX84Jns3/fridge.png" %>
		</div>

	</div>

<% current_group.each do |g| %>
<%= g.name %>
<% end %>
<!-- angular -->

<h1>Anagram of Palindrome Checker</h1>

<input style="font-size:40px;" type="text" ng-model="teststring" ng-class="{is_anagram: data==1, not_anagram: data==0, no_entry: data==-1}" ng-change="is_anagram()"/>
{{data}}

<!-- modal -->

<div class="modal fade bs-example-modal-lg" tabindex="-1" role="dialog" aria-labelledby="myLargeModalLabel" aria-hidden="true">
  <div class="modal-dialog modal-lg">
    <div class="modal-content">
      ...
    </div>
  </div>
</div>



<script>
window.onload = function() {

	/**
	*
	*	Demo 1: Elements
	*
	*/
	var dropZoneOne = document.querySelector('#drop-target-one');
	var dragElements = document.querySelectorAll('#drag-elements li');
	var elementDragged = null;

	for (var i = 0; i < dragElements.length; i++) {

		// Event Listener for when the drag interaction starts.
		dragElements[i].addEventListener('dragstart', function(e) {
			e.dataTransfer.effectAllowed = 'move';

			elementDragged = this;
		});

		// Event Listener for when the drag interaction finishes.
		dragElements[i].addEventListener('dragend', function(e) {
			elementDragged = null;
		});
	};

	// Event Listener for when the dragged element is over the drop zone.
	dropZoneOne.addEventListener('dragover', function(e) {
		if (e.preventDefault) {
			e.preventDefault();
		}

		e.dataTransfer.dropEffect = 'move';

		return false;
	});

	// Event Listener for when the dragged element enters the drop zone.
	dropZoneOne.addEventListener('dragenter', function(e) {
		this.className = "over";
	});

	// Event Listener for when the dragged element leaves the drop zone.
	dropZoneOne.addEventListener('dragleave', function(e) {
		this.className = "";
	});

	// Event Listener for when the dragged element dropped in the drop zone.
	dropZoneOne.addEventListener('drop', function(e) {
	var data = e.dataTransfer.getData('text');
		if (e.preventDefault) e.preventDefault(); 
  	if (e.stopPropagation) e.stopPropagation(); 


  	this.className = "";
		window.location.href = e.dataTransfer.getData('text');

		console.log("dropped " + data);
  	});

  	// dropZoneOne.addEventListener('drop', function loadPath(e){
  	// 	window.location.href = e.dataTransfer.setData('text', this.id);
  	// }); 

 

		


	// 	// Remove the element from the list.
	// 	return false;
	// });




	/**
	*
	*	Demo 2: Text Files
	*
	*/
	// var dropZoneTwo = document.querySelector('#dd-files');
	// var fileContentPane = document.querySelector('#file-content');

	// // Event Listener for when the dragged file is over the drop zone.
	// dropZoneTwo.addEventListener('dragover', function(e) {
	// 	if (e.preventDefault) e.preventDefault(); 
	// 	if (e.stopPropagation) e.stopPropagation(); 

	// 	e.dataTransfer.dropEffect = 'copy';
	// });

	// // Event Listener for when the dragged file enters the drop zone.
	// dropZoneTwo.addEventListener('dragenter', function(e) {
	// 	this.className = "over";
	// });

	// // Event Listener for when the dragged file leaves the drop zone.
	// dropZoneTwo.addEventListener('dragleave', function(e) {
	// 	this.className = "";
	// });

	// // Event Listener for when the dragged file dropped in the drop zone.
	// dropZoneTwo.addEventListener('drop', function(e) {
	// 	if (e.preventDefault) e.preventDefault(); 
	// 	if (e.stopPropagation) e.stopPropagation(); 

	// 	this.className = "";

	// 	var fileList = e.dataTransfer.files;

	// 	if (fileList.length > 0) {
	// 		readTextFile(fileList[0]);
	// 	}
	// });


	// Read the contents of a file.
	// function readTextFile(file) {
	// 	var reader = new FileReader();

	// 	reader.onloadend = function(e) {
	// 		if (e.target.readyState == FileReader.DONE) {
	// 			var content = reader.result;
	// 			fileContentPane.innerHTML = "File: " + file.name + "\n\n" + content;
	// 		}
	// 	}
		
 //    reader.readAsBinaryString(file);
	// }
	
};





</script>


